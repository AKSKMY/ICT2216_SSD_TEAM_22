name: MediVault TestCases

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  flask-and-ui-test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: admin
          MYSQL_DATABASE: rbac
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=20

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..10}; do
            mysql -h 127.0.0.1 -u root -padmin -e "SELECT 1" && break
            echo "Waiting for MySQL..."
            sleep 5
          done

      - name: Build Flask app image
        run: docker build -t medivault-app .

      - name: Run Flask container
        run: |
          docker run -d --name flask-app \
            -p 5000:5000 \
            -v ${{ github.workspace }}/backend:/app \
            -w /app \
            -e FLASK_SECRET_KEY=testsecret \
            -e FLASK_ENV=development \
            -e MAIL_USERNAME=fake@example.com \
            -e MAIL_PASSWORD=dummy \
            -e MAIL_DEFAULT_SENDER=fake@example.com \
            -e DB_HOST=127.0.0.1 \
            -e DB_USER=root \
            -e DB_PASSWORD=admin \
            -e DB_NAME=rbac \
            -e RECAPTCHA_SITE_KEY=test \
            -e RECAPTCHA_SECRET_KEY=test \
            medivault-app \
            python app.py

      - name: Wait for Flask app to boot
        run: sleep 5

      - name: Test Website Connection (/)
        run: curl --fail http://localhost:5000/

      - name: Test DB Connection (/test-db)
        run: curl --fail http://localhost:5000/test-db

      - name: Install Chromium and test dependencies
        run: |
          sudo apt update
          sudo apt install -y chromium-browser chromium-chromedriver
          pip install -r backend/requirements.txt

      - name: Run Selenium UI test for /register
        run: python backend/tests/test_register_ui.py
