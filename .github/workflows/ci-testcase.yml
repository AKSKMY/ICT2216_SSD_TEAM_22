name: MediVault TestCases

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  flask-and-ui-test:
    runs-on: ubuntu-22.04

    # âœ… Shared environment variables for all steps
    env:
      FLASK_SECRET_KEY: testsecret
      MAIL_SERVER: smtp.test.com
      MAIL_PORT: 587
      MAIL_USE_TLS: true
      MAIL_USERNAME: fake@example.com
      MAIL_PASSWORD: dummy
      MAIL_DEFAULT_SENDER: fake@example.com
      DB_HOST: 127.0.0.1
      DB_USER: root
      DB_PASSWORD: admin
      DB_NAME: rbac
      RECAPTCHA_SITE_KEY: test
      RECAPTCHA_SECRET_KEY: test

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: admin
          MYSQL_DATABASE: rbac
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=20

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build Docker image for Flask
      run: docker build -t medivault-app .

    - name: Run Flask container
      run: |
        docker run -d --name flask-app \
          --network host \
          -v ${{ github.workspace }}/backend:/app \
          -w /app \
          -e FLASK_SECRET_KEY=$FLASK_SECRET_KEY \
          -e MAIL_SERVER=$MAIL_SERVER \
          -e MAIL_PORT=$MAIL_PORT \
          -e MAIL_USE_TLS=$MAIL_USE_TLS \
          -e MAIL_USERNAME=$MAIL_USERNAME \
          -e MAIL_PASSWORD=$MAIL_PASSWORD \
          -e MAIL_DEFAULT_SENDER=$MAIL_DEFAULT_SENDER \
          -e DB_HOST=$DB_HOST \
          -e DB_USER=$DB_USER \
          -e DB_PASSWORD=$DB_PASSWORD \
          -e DB_NAME=$DB_NAME \
          -e RECAPTCHA_SITE_KEY=$RECAPTCHA_SITE_KEY \
          -e RECAPTCHA_SECRET_KEY=$RECAPTCHA_SECRET_KEY \
          medivault-app \
          python app.py

    - name: Wait for Flask app to boot
      run: sleep 10

    - name: Test Website Connection
      run: curl --fail http://localhost:5000/

    - name: Test DB Connection
      run: curl --fail http://localhost:5000/test-db

    - name: Install Chromium and Python dependencies
      run: |
        sudo apt update
        sudo apt install -y chromium-browser chromium-chromedriver
        pip install -r backend/requirements.txt

    - name: Run 'Register' Testcase
      run: python backend/tests/test_register_ui.py

    - name: Run 'Add Record' Testcase
      run: python backend/tests/test_addrec_ui.py

    - name: Flask Logs
      if: always()
      run: docker logs flask-app
