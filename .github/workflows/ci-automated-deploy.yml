name: Deploy to EC2 via Docker

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  deployments: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: akskmy/ssd_flask_app:latest

    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd project/compose
          git pull

          # Stop and remove running containers safely
          if [ "$(sudo docker ps -q)" ]; then sudo docker stop $(sudo docker ps -q); fi
          if [ "$(sudo docker ps -aq)" ]; then sudo docker rm $(sudo docker ps -aq); fi

          # Pull the latest image
          sudo docker pull akskmy/ssd_flask_app:latest

          # Remove old stack (ignore if not running)
          sudo docker stack rm my_stack
          sleep 5

          # Remove volumes (skip if not found)
          sudo docker volume rm my_stack_db_data || true
          sudo docker volume rm compose_db_data || true
          sudo docker volume rm db_data || true

          # Ensure network exists
          if ! sudo docker network inspect my_stack_app_net > /dev/null 2>&1; then
            sudo docker network create my_stack_app_net
          fi

          # Deploy the new stack
          sudo docker stack deploy -c docker-compose.yml --detach=false my_stack
